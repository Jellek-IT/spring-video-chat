spring:
  application:
    name: backendmain
  profiles:
    group:
      "local": "localsecrets,openapi,request-logging"
    active: ${ACTIVE_PROFILES}
  datasource:
    url: jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB}
    username: ${PG_USERNAME}
    password: ${PG_PASSWORD}
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
  jpa:
    database: postgresql
    open-in-view: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        temp.use_jdbc_metadata_defaults: false
        globally_quoted_identifiers: true
  liquibase:
    change-log: db/main-changelog.xml
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI}
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
  mvc:
    format:
      date: iso
      date-time: iso
      time: iso
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    properties:
      security.protocol: ${KAFKA_SECURITY_PROTOCOL}
      sasl.mechanism: ${KAFKA_SASL_MECHANISM}
      sasl.jaas.config: ${KAFKA_JAAS_CONFIG}
      spring.json.add.type.headers: false

server:
  port: ${SERVER_PORT}
  servlet:
    context-path: /api

app:
  id: ${APP_ID}
  client:
    keycloak:
      client-id: ${KEYCLOAK_CLIENT_ID}
      client-secret: ${KEYCLOAK_CLIENT_SECRET}
      server-url: ${KEYCLOAK_SERVER_URL}
      realm: ${KEYCLOAK_REALM}
    stomp-broker:
      enabled: ${STOMP_BROKER_ENABLED}
      relay-host: ${STOMP_BROKER_RELAY_HOST}
      relay-port: ${STOMP_BROKER_RELAY_PORT}
      client-login: ${STOMP_BROKER_CLIENT_LOGIN}
      client-passcode: ${STOMP_BROKER_CLIENT_PASSCODE}
    s3:
      access-key: ${S3_ACCESS_KEY}
      secret-key: ${S3_SECRET_KEY}
      endpoint: ${S3_ENDPOINT}
      bucket: ${S3_BUCKET}
      region: ${S3_REGION}
    janus:
      ws-host: ${JANUS_WS_HOST}
      token-auth-secret: ${JANUS_TOKEN_AUTH_SECRET}
      video-room-admin-key: ${JANUS_VIDEO_ROOM_ADMIN_KEY}
      publishers: 6
      app-auth-token-lifetime: 1d
      client-auth-token-lifetime: 10m
      video-room-life-time: 1h
  kafka:
    topic:
      notification:
        name: queuing.springchat.notification.json
  scheduling:
    enabled: true
    thread-pool-size: 12
    cron:
      video-room-clear-expired: "0 */30 * * * *"
  async:
    core-pool-size: 12
  token:
    user-registered-confirmation-ttl: 3600 # 1 hour
springdoc:
  api-docs:
    enabled: false
  swagger-ui:
    displayOperationId: true
    tagsSorter: alpha

logging:
  level:
    pl.bronikowski.springchat.backendmain: DEBUG
    org.hibernate.orm.query: ERROR