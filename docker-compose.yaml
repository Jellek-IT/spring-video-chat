services:
  postgres:
    image: postgres:17.2
    command: ["postgres", "-c", "log_statement=all"]
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: springchat
      POSTGRES_DATABASE: springchat
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
  postgres-keycloak:
    image: postgres:17.2
    command: ["postgres", "-c", "log_statement=all"]
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
      POSTGRES_USER: springchat
      POSTGRES_DATABASE: springchat
    volumes:
      - "postgres_keycloak_data:/var/lib/postgresql/data"
  keycloak:
    build: ./keycloak
    depends_on:
      - postgres-keycloak
    command:
      [
        "start-dev",
        "-Dkeycloak.migration.action=import",
        "-Dkeycloak.migration.provider=singleFile",
        "-Dkeycloak.migration.file=/opt/keycloak/realm-docker.json",
        "-Dkeycloak.migration.strategy=IGNORE_EXISTING",
        "-Djboss.socket.binding.port-offset=1000",
        "-Dkeycloak.profile.feature.upload_scripts=enabled",
        "--spi-theme-static-max-age=-1",
        "--spi-theme-cache-themes=false",
        "--spi-theme-cache-templates=false",
      ]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_LOGLEVEL: DEBUG
      APP_FRONTEND_MAIN_URL: ${FRONTEND_APP_URL}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/springchat
      KC_DB_USERNAME: springchat
      KC_DB_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
    volumes:
      - ./keycloak/themes/spring-chat:/opt/keycloak/themes/spring-chat
      - ./keycloak/realm-docker.json:/opt/keycloak/realm-docker.json
    network_mode: "service:localhost"
  rabbitmq:
    build:
      context: ./rabbitmq
      args:
        STOMP_PASSWORD: ${STOMP_PASSWORD}
  minio:
    image: quay.io/minio/minio:RELEASE.2024-11-07T00-52-20Z
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "minio_data:/data"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server --console-address ":9001" /data
  janus:
    build:
      context: ./janus
      args:
        TOKEN_AUTH_SECRET: ${JANUS_TOKEN_AUTH_SECRET}
        ADMIN_SECRET: ${JANUS_ADMIN_SECRET}
        VIDEOROOM_ADMIN_KEY: ${JANUS_VIDEO_ROOM_ADMIN_KEY}
    environment:
      NAT_1_1: ${JANUS_NAT_1_1}
    ports:
      - "8188:8188"
      - "7088:7088"
      - "10000-10200:10000-10200/udp"
  redis:
    image: redis:7.4.2-alpine
    entrypoint: /bin/sh -c
    command: redis-server --loglevel verbose --requirepass $$REDIS_PASSWORD
    environment:
      REDIS_PASSWORD: password
    volumes:
      - redis_data:/data
  mongodb:
    image: mongo:6.0.21-jammy
    hostname: mongodb
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: springchat_notification
      SPRINGCHAT_NOTIFICATION_DB_USER: springchat
      SPRINGCHAT_NOTIFICATION_DB_PASSWORD: ${SPRINGCHAT_NOTIFICATION_DB_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
  kafka1:
    hostname: kafka1
    environment:
      KAFKA_LISTENERS: BROKER://kafka1:19092,CONTROLLER://kafka1:9093
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka1:19092
      KAFKA_NODE_ID: 1
    volumes:
      - kafka1_data:/var/lib/kafka/data
    extends:
      file: common-config.yml
      service: kafka
  kafka2:
    hostname: kafka2
    environment:
      KAFKA_LISTENERS: BROKER://kafka2:19093,CONTROLLER://kafka2:9093
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka2:19093
      KAFKA_NODE_ID: 2
    volumes:
      - kafka2_data:/var/lib/kafka/data
    extends:
      file: common-config.yml
      service: kafka
  kafka3:
    hostname: kafka3
    environment:
      KAFKA_LISTENERS: BROKER://kafka3:19094,CONTROLLER://kafka3:9093
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka3:19094
      KAFKA_NODE_ID: 3
    volumes:
      - kafka3_data:/var/lib/kafka/data
    extends:
      file: common-config.yml
      service: kafka
  backend-main:
    build: ./backend/main
    depends_on:
      - postgres
      - keycloak
      - redis
      - rabbitmq
      - minio
      - janus
      - kafka1
      - kafka2
      - kafka3
    environment:
      ACTIVE_PROFILES: async,request-logging
      PG_HOST: postgres
      PG_PORT: 5432
      PG_DB: springchat
      PG_USERNAME: springchat
      PG_PASSWORD: ${POSTGRES_PASSWORD}
      SERVER_PORT: 8081
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      APP_ID: docker
      KEYCLOAK_ISSUER_URI: ${KEYCLOAK_ISSUER_URI}
      KEYCLOAK_CLIENT_ID: springchat-backendmain
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_BACKEND_CLIENT_SECRET}
      KEYCLOAK_SERVER_URL: http://localhost:8080
      KEYCLOAK_REALM: spring-chat
      STOMP_BROKER_ENABLED: "true"
      STOMP_BROKER_RELAY_HOST: rabbitmq
      STOMP_BROKER_RELAY_PORT: 61613
      STOMP_BROKER_CLIENT_LOGIN: admin
      STOMP_BROKER_CLIENT_PASSCODE: ${STOMP_PASSWORD}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: springchat-backendmain
      S3_REGION: aws-global
      JANUS_WS_HOST: ws://janus:8188
      JANUS_TOKEN_AUTH_SECRET: ${JANUS_TOKEN_AUTH_SECRET}
      JANUS_VIDEO_ROOM_ADMIN_KEY: ${JANUS_VIDEO_ROOM_ADMIN_KEY}
      KAFKA_BOOTSTRAP_SERVERS: kafka1:19092,kafka2:19093,kafka3:19094
      KAFKA_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_SASL_MECHANISM:
      KAFKA_JAAS_CONFIG:
    network_mode: "service:localhost"
  backend-notification1:
    extends:
      file: common-config.yml
      service: backend-notification
  backend-notification2:
    extends:
      file: common-config.yml
      service: backend-notification
  backend-notification3:
    extends:
      file: common-config.yml
      service: backend-notification
  frontend-main:
    build:
      context: ./frontend/main
      args:
        SERVER_URL: ${FRONTEND_SERVER_URL}
        SOCKJS_URL: ${FRONTEND_SOCKJS_URL}
        JANUS_WS_URL: ${FRONTEND_JANUS_WS_URL}
        APP_URL: ${FRONTEND_APP_URL}
        KEYCLOAK_URL: ${KEYCLOAK_SERVER_URL}
    depends_on:
      - backend-main
    ports:
      - "80:80"
  localhost:
    image: alpine:latest
    command: sleep infinity
    ports:
      - "8081:8081"
      - "8080:8080"
volumes:
  postgres_data:
    driver: local
  postgres_keycloak_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  kafka1_data:
    driver: local
  kafka2_data:
    driver: local
  kafka3_data:
    driver: local
